# -*- coding: utf-8 -*-
"""Copia de M5 - 09 - Folium.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKMy4uoxUESlBIjCjkZw9kuuYBkqYwZo

# Generando mapas con Python
"""



"""## Introducción


En este laboratorio aprenderemos a crear distintos mapas interactivos. Para ello utilizaremos una nueva librería llamada Folium, una librería creada con el objetivo de visualizar datos geoespaciales. También destacamos que estas visualizaciones es posible realizarlas con plotly, pero hay un límite de veces que podemos llamar a la API para datos geoespaciales, a no ser que paguemos. Por otro lado, folium es completamente gratuito y mas potente.

2.  Inmigración a Canadá de 1980 a 2013 - [Flujos migratorios internacionales hacia y desde países seleccionados - La revisión de 2015](http://www.un.org/en/development/desa/population/migration/data/empirical2/migrationflows.shtml?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDV0101ENSkillsNetwork20297740-2021-01-01) del sitio web de las Naciones Unidas. El conjunto de datos contiene datos anuales sobre los flujos de migrantes internacionales registrados por los países de destino. Los datos presentan tanto las entradas como las salidas según el lugar de nacimiento, ciudadanía o lugar de residencia anterior/posterior tanto para extranjeros como para nacionales. Para esta lección, nos centraremos en los datos de inmigración canadiense

# Importando las librerías
"""

import numpy as np 
import pandas as pd
import folium

"""# Introducción a Folium <a id="4"></a>

Folium es una potente libería de Python que permite crear diferentes tipos de mapas utilizando la librería de javascrip [Leaflet](https://leafletjs.com). Los mapas de Folium son interactivos lo que les da un valor añadido ya que pueden ser integrados en dashboards.

Generar un mapamundi es bastante sencillo, simplemente creamos un objeto `folium.Map()` y lo mostramos:
"""

# definimos el mapamundi
world_map = folium.Map()

# mostramos el mapamundi
world_map

"""**Ejercicio:**  Interacciona con el mapa anterior para encontrar Madrid.

Vamos a crear un mapa centrado alrededor de Canadá y jugar con el nivel de zoom para ver cómo afecta el mapa renderizado.

Es posible personalizar esta definición básica especificando donde debe ser centrado el mapa añadiendo un parámetro `location=[LATITUD,LONGITUD]`. También es posible modificar el zoom mediante el parámetro `zoom_start=int`, cuanto mayor este número mas zoom se realiza.

#### Ejercicio

Sabiendo que las coordinadas de Canadá son [56.130, -106.35] realiza un mapa centrado en Canadá. Elige un valor para el parámetro `zoom_start` que permita visualizar correctamente el país entero.
"""

# Creamos un objeto de tipo Map centrado en la ubicación que queremos mostrar
mapa = folium.Map(location= [56.130, -106.35], zoom_start=3)

# Añadimos un marcador en la ubicación
folium.Marker( [56.130, -106.35], popup='Canada').add_to(mapa)

# Mostramos el mapa
mapa

"""Utiliza la página [geodatos](https://www.geodatos.net/coordenadas) para averiguar las coordenadas de España y así realizar un mapa centrado en España."""

#INSERTA AQUÍ TU CÓDIGO
import folium

# Creamos un objeto de tipo Map centrado en la ubicación que queremos mostrar
mapa = folium.Map(location=[42.431, -8.64435], zoom_start=10)

# Añadimos un marcador en la ubicación
folium.Marker([42.431, -8.64435], popup='Pontevedra').add_to(mapa)

# Mostramos el mapa
mapa

"""Otra propiedad interesante de Folium es la posibilidad de generar mapas con diferentes estilos. Por ejemplo:

### Stamen Toner Maps

Estos son mapas en blanco y negro con gran contrastre. Perfectos para estudiar cauces de ríos o zonas costeras. Tienen un gran nivel de detalle de los contornos. Por ejemplo:
"""

world_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Toner')
world_map

"""### Stamen Terrain Maps

Estos mapas contienen relieve del terreno y vegetación natural. También mantienen gran parte de la infrastuctura como carreteras pero reduce la nomenclatura a aquellas mas relevantes. Por ejemplo: 
"""

world_map = folium.Map(location=[56.130, -106.35], zoom_start=4, tiles='Stamen Terrain')
world_map

"""#### Ejercicio

Crea dos mapas centrados en España siguiendo los diferentes estilos estudiados en los ejemplos anteriores.
"""

#INSERTA AQUÍ TU CÓDIo# Creamos un objeto de tipo Map centrado en la ubicación que queremos mostrar
mapa = folium.Map(location=[40.4168, -3.7038], zoom_start=7)

# Añadimos un marcador en la ubicación
folium.Marker([40.4168, -3.7038], popup='Madrid').add_to(mapa)
world_map = folium.Map(location=[42.431, -8.64435], zoom_start=4, tiles='Stamen Terrain')
world_map

"""# Mapas con indicadores

En esta sección trabajaremos con el siguiente copnjiunto de datos:
Incidentes del Departamento de Policía de San Francisco del año 2016 del portal de datos públicos de San Francisco. Incidentes derivados del sistema de informes de incidentes delictivos del Departamento de Policía de San Francisco (SFPD). Se actualiza diariamente y muestra los datos de todo el año 2016. La dirección y la ubicación se anonimizaron moviéndose a mitad de cuadra o a una intersección.

Descarguemos e importemos los datos sobre los incidentes del departamento de policía usando el método de *pandas* `read_csv()`.

En esta sección trabajaremos con los datos del departamento de policia de San Francisco, un conjunto de datos con los incidentes de 2016. . 

Guarda el dataset en un dataframe de pandas

Descarga el dataset y guárdalo en un dataframe de *pandas*:
"""

URL = 'Police_Incidents.csv'
df_incidents =  pd.read_csv(URL)

"""Echemos un vistazo al dataset:

"""

df_incidents.head()

df_incidents['Date'] = pd.to_datetime(df_incidents['Date'])  
df_incidents[df_incidents["Date"] <= "01/01/2016"]

"""El dataset tiene 13 columnas:
> 1.  **IncidntNum**: Numero identificativo del incidente
> 2.  **Category**: Categoría del incidente
> 3.  **Descript**: Descripción del incidente
> 4.  **DayOfWeek**: Día de la semana que se produjo el incidente
> 5.  **Date**: Fecha que se produjo el incidente
> 6.  **Time**: Hora que se produjo el incidente
> 7.  **PdDistrict**: Departamento de policia que asistió.
> 8.  **Resolution**: Resolución del incidente.
> 9.  **Address**: Dirección.
> 10. **X**: La longitud del punto donde se produjo el incidente.
> 11. **Y**: La latituddel punto donde se produjo el incidente.
> 12. **Location**: Una tulpa con la longitud y la latitud.
> 13. **PdId**: ID del departamento de policia.

Como intuiremos el dataset no es precisamente pequeño. Veamos el tamaño:
"""

df_incidents.shape

"""Así pues, el conjunto de datos consiste en 150,500 incidentes que sucedieron en 2016. Realizar la  visuliazación de todos los datos será realmente costoso desde el punto de vista computacional. Por tanto, vamos a limitarnos a los primeros 100.

"""

# obtenemos los primeros 100 incidentes en el dataframe df_incidents
limit = 100
df_incidents = df_incidents.iloc[0:limit, :]

"""Vamos a confirmar que nuestro dataframe ahora consta solo de 100 incidentes.

"""

df_incidents.shape

"""Ahora que redujimos un poco los datos, visualicemos dónde ocurrieron estos crímenes en la ciudad de San Francisco. Usaremos el estilo predeterminado e inicializaremos el nivel de zoom a 12.

"""

# Valores de latitud y longitud de San Francisco
latitude = 37.77
longitude = -122.42

# creamos el mapa y lo mostramos
sanfran_map = folium.Map(location=[latitude, longitude], zoom_start=12)

# mostramos el mapa de San Francisco
sanfran_map

"""Ahora superpongamos las ubicaciones de los crímenes en el mapa. La forma de hacerlo en **Folium** es crear un *feature group* (grupo de caractarísticas) con sus propias características y estilo y luego agregarlo a `sanfran_map`.

"""

# instanciamos un feature group para los incidentes en el dataframe
incidents = folium.map.FeatureGroup()

# recorremos los 100 delitos y agregamos cada uno al feature group de incidentes
for lat, lng, in zip(df_incidents.Y, df_incidents.X):
    incidents.add_child(
        folium.features.CircleMarker(
            [lat, lng],
            radius=5, # definimos cuan grande queremos que sean los marcadores circulares
            color='yellow',
            fill=True,
            fill_color='blue',
            fill_opacity=0.6
        )
    )

# añadimos los incidentes al mapa
sanfran_map.add_child(incidents)

"""También podemos agregar un texto emergente que se mostrará cuando pase el cursor sobre un marcador. Hagamos que cada marcador muestre la categoría del incidente cuando pase el cursor sobre él.

"""

# instanciamos un feature group para los incidentes en el dataframe
incidents = folium.map.FeatureGroup()

# recorremos los 100 delitos y agregamos cada uno al feature group de incidentes
for lat, lng, in zip(df_incidents.Y, df_incidents.X):
    incidents.add_child(
        folium.features.CircleMarker(
            [lat, lng],
            radius=5, # definimos cuan grande queremos que sean los marcadores circulares
            color='yellow',
            fill=True,
            fill_color='blue',
            fill_opacity=0.6
        )
    )

# añadimos el texto emergente a cada marcador en el mapa
latitudes = list(df_incidents.Y)
longitudes = list(df_incidents.X)
labels = list(df_incidents.Category)

for lat, lng, label in zip(latitudes, longitudes, labels):
    folium.Marker([lat, lng], popup=label).add_to(sanfran_map)    
    
# añadimos los incidentes al mapa
sanfran_map.add_child(incidents)

"""¿No es esto realmente genial? Ahora puedes saber qué categoría de incidente ocurrió en cada marcador.

Si encuentras que el mapa está tan congestionado con todos estos marcadores, hay dos soluciones para este problema. La más simple es eliminar estos marcadores de ubicación y simplemente agregar el texto a los marcadores de círculo de la siguiente manera:

"""

# creamos el mapa y lo mostramos
sanfran_map = folium.Map(location=[latitude, longitude], zoom_start=12)

# recorremos los 100 delitos y agregamos cada uno al mapa
for lat, lng, label in zip(df_incidents.Y, df_incidents.X, df_incidents.Category):
    folium.features.CircleMarker(
        [lat, lng],
        radius=5, # definimos cuan grande queremos que sean los marcadores circulares
        color='yellow',
        fill=True,
        popup=label,
        fill_color='blue',
        fill_opacity=0.6
    ).add_to(sanfran_map)

# mostramos el mapa
sanfran_map

"""La otra solución es agrupar los marcadores en diferentes grupos. Luego, cada grupo se representa por el número de delitos en cada barrio. Estos grupos se pueden considerar como focos de San Francisco que pueden ser analizados por separado.

Para implementar esto, comenzamos instanciando un objeto *MarkerCluster* y agregando todos los puntos de datos en el dataframe a este objeto.

"""

from folium import plugins

# empecemos de nuevo con una copia limpia del mapa de San Francisco
sanfran_map = folium.Map(location = [latitude, longitude], zoom_start = 12)

# instanciamos un objeto mark cluster para los incidentes en el dataframe
incidents = plugins.MarkerCluster().add_to(sanfran_map)

# recorremos el dataframe y agregamos cada punto de datos al mark cluster
for lat, lng, label, in zip(df_incidents.Y, df_incidents.X, df_incidents.Category):
    folium.Marker(
        location=[lat, lng],
        icon=None,
        popup=label,
    ).add_to(incidents)

# mostramos el mapa
sanfran_map

"""Observa cómo, cuando se aleja por completo, todos los marcadores se agrupan en un grupo, *el global cluster*, de 100 marcadores o incidentes, que es el número total de incidentes en nuestro dataframe. Una vez que comiences a acercar, el *global cluster* comenzará a dividirse en grupos más pequeños. Acercar por completo dará como resultado marcadores individuales.

# Mapas de Coropletas <a id="8"></a>

Un mapa de `Coropletas` es un mapa temático en el que las áreas están sombreadas o modeladas en proporción a la medida de la variable estadística que se muestra en el mapa, como la densidad de población o el ingreso per cápita. El mapa de coropletas proporciona una manera fácil de visualizar cómo varía una medida en un área geográfica, o muestra el nivel de variabilidad dentro de una región. A continuación se muestra un mapa de `Coropletas` de los EE. UU. que muestra la población por milla cuadrada por estado.

<img src = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/labs/Module%205/images/2000_census_population_density_map_by_state.png" width = 600>

Ahora, vamos a crear nuestro propio mapa de `Coropletas` del mundo que represente la inmigración de varios países a Canadá.

Descarga el dataset de inmigración canadiense y guárdalo en un dataframe de *pandas*.
"""

df_can = pd.read_excel("Canada.xlsx")

"""Echemos un vistazo a los primeros cinco elementos de nuestro dataset.

"""

df_can.head()

"""Averigüemos cuántas entradas hay en nuestro dataset.

"""

# imprimimos las dimensiones del dataframe
print(df_can.shape)

"""Limpiamos los datos. Haremos algunas modificaciones al dataset original para que sea más fácil crear nuestras visualizaciones. Consulta los cuadernos *Introducción a Matplotlib y gráficos de líneas* y *Gráficos de área, histogramas y gráficos de barras* para obtener una descripción detallada de este preprocesamiento.

"""

# limpiamos el dataset eliminando columnas innecesarias (ej. REG) 
df_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)

# cambiemos el nombre de las columnas para que tengan sentido
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)

# para ser coherentes, hagamos que todas las etiquetas de las columnas sean de tipo string
df_can.columns = list(map(str, df_can.columns))

# añadimos la columna Total
df_can['Total'] = df_can.sum(axis=1)

# años que usaremos en esta lección - útil para trazar más adelante
years = list(map(str, range(1980, 2014)))
print ('data dimensions:', df_can.shape)

"""Echemos un vistazo a los primeros cinco elementos de nuestro nuevo dataframe.

"""

df_can.head()

"""Para crear un mapa de `Coropletas`, necesitamos un archivo GeoJSON que defina las áreas/límites del estado, condado o país que nos interesa. En nuestro caso, dado que estamos creando un mapa del mundo, queremos un GeoJSON que defina los límites de todos los países del mundo. Para facilitar la tarea, te proporcionaremos este archivo, así que adelante, cárgalo.

"""

import json

with open("world_countries.json", 'r') as f:
  world_geo=json.load(f)

"""Ahora que tenemos el archivo GeoJSON, vamos a crear un mapa del mundo, centrado alrededor de los valores **\[0, 0]** *latitud* y *longitud*, con un nivel de zoom inicial de 2.

"""

# creamos un mapa del mundo plano
world_map = folium.Map(location=[0, 0], zoom_start=2)

"""Y ahora, para crear un mapa de `Coropletas`, usaremos el método *choropleth* con los siguientes parámetros principales:

1.  `geo_data`, que es el archivo GeoJSON.
2.  `data`, que es el dataframe que contiene los datos.
3.  `columns`, que representa las columnas en el dataframe que se usarán para crear el mapa de `Coropletas`.
4.  `key_on`, que es la clave o variable en el archivo GeoJSON que contiene el nombre de la variable de interés. Para determinar esto, deberás abrir el archivo GeoJSON usando cualquier editor de texto y anotar el nombre de la clave o variable que contiene el nombre de los países, ya que los países son nuestra variable de interés. En este caso, **name** es la clave en el archivo GeoJSON que contiene el nombre de los países. Ten en cuenta que esta clave distingue entre mayúsculas y minúsculas, por lo que debes pasar exactamente como está en el archivo GeoJSON.

"""

# generamos un mapa de coropletas utilizando la inmigración total de cada país a Canadá desde 1980 hasta 2013
world_map.choropleth(
    geo_data=world_geo,
    data=df_can,
    columns=['Country', 'Total'],
    key_on='feature.properties.name',
    fill_color='YlOrRd', 
    fill_opacity=0.7, 
    line_opacity=0.2,
    legend_name='Immigration to Canada'
)

# mostramos el mapa
world_map

"""Según la leyenda de nuestro mapa de "Coropletas", cuanto más oscuro es el color de un país y más cercano al rojo, mayor es el número de inmigrantes de ese país. En consecuencia, la mayor inmigración en el transcurso de 33 años (de 1980 a 2013) provino de China, India y Filipinas, seguidos de Polonia, Pakistán y, curiosamente, EE. UU.

Observa cómo la leyenda muestra un límite o umbral negativo. ¡Arreglemos eso definiendo nuestros propios umbrales y comenzando con 0 en lugar de -6,918!
"""

# creamos un array numpy de longitud 6 y tiene un espacio lineal desde la inmigración total mínima hasta la inmigración total máxima
threshold_scale = np.linspace(df_can['Total'].min(),
                              df_can['Total'].max(),
                              6, dtype=int)
threshold_scale = threshold_scale.tolist() # cambiamos el array numpy a una lista
threshold_scale[-1] = threshold_scale[-1] + 1 # asegúrate de que el último valor de la lista sea mayor que la inmigración máxima

# dejamos que Folium determine la escala
world_map = folium.Map(location=[0, 0], zoom_start=2)
world_map.choropleth(
    geo_data=world_geo,
    data=df_can,
    columns=['Country', 'Total'],
    key_on='feature.properties.name',
    threshold_scale=threshold_scale,
    fill_color='YlOrRd', 
    fill_opacity=0.7, 
    line_opacity=0.2,
    legend_name='Immigration to Canada',
    reset=True
)
world_map

"""¡Mucho mejor ahora! Siéntete libre de jugar con los datos y tal vez crear mapas de 'Coropletas' para años individuales, o quizás décadas, y ver cómo se comparan con el período completo desde 1980 hasta 2013.

"""

